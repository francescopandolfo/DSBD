version: '3.8'

services:
  
################### GET_TIME_SERIES ####################
  gettimeseries:
    container_name: gettimeseries
    build:
      dockerfile: Dockerfile
      context: ./get-time-series
    ports:
      - 8001:8080
    networks:
      - dsbd-net      

########### #USERS-MANAGER ########################
  mysql-usersmanager:
    image: "mysql"
    restart: always
    container_name: mysql-usersmanager
    environment:
      MYSQL_DATABASE: dsbd-pandolfo
      MYSQL_USER: francesco
      MYSQL_PASSWORD: pandolfo
      MYSQL_ROOT_PASSWORD: toor
      MYSQL_HOST: localhost
    volumes:
      - ./data/db-usersmanager:/var/lib/mysql  #eseguire prima: mkdir -p ./data/db-usersmanager
#    ports:
#      - 6033:3306  #solo per debug di usersmanager
    networks:
      - dsbd-net

  usersmanager:
    container_name: usersmanager
    build:
      dockerfile: Dockerfile
      context: ./users-manager
    restart: always
    depends_on:
      - gettimeseries
      - kafka
      - mysql-usersmanager
    ports:
      - 8002:8080
    networks:
      - dsbd-net
   
################## NOTIFIER #######################

  mysql-notifier:
    image: "mysql"
    restart: always
    container_name: mysql-notifier
    environment:
      MYSQL_DATABASE: dsbd-pandolfo
      MYSQL_USER: francesco
      MYSQL_PASSWORD: pandolfo
      MYSQL_ROOT_PASSWORD: toor
      MYSQL_HOST: localhost
    volumes:
      - ./data/db-notifier:/var/lib/mysql  #eseguire prima: mkdir -p ./data/db-notifier
#    ports:
#      - 6033:3306  #solo per debug di notifier
    networks:
      - dsbd-net

  notifier:
    container_name: notifier
    build:
      dockerfile: Dockerfile
      context: ./notifier
    restart: always
    depends_on:
      - gettimeseries
      - usersmanager
      - kafka
    networks:
      - dsbd-net

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    expose:
      - 2181
    networks:
      - dsbd-net      
  
#KAFKA  
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports: 
      - 29092:29092 #solo per debug di usermanager o notifier
#    expose:
#      - 29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_MS: 10000
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 10000
    networks:
      - dsbd-net

  kafka-exporter:
    image: lightbend/kafka-lag-exporter:0.5.5
    hostname: kafka-exporter
    restart: always
    ports:
      - 9999:9999
    networks:
      - dsbd-net
    volumes:
      - ./kafka-exporter/:/opt/docker/conf/

#PROMETHEUS
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 8003:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
    networks:
      - dsbd-net

#GRAFANA
  grafana:
    image: grafana/grafana:6.7.2
    container_name: grafana
    volumes:
#      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
    - 8005:3000
    expose:
      - 3000
    networks:
      - dsbd-net
    labels:
      org.label-schema.group: "monitoring"

#SLA MANAGER
  mysql-sla:
    image: "mysql"
    restart: always
    container_name: mysql-sla
    environment:
      MYSQL_DATABASE: sla-manager
      MYSQL_USER: francesco
      MYSQL_PASSWORD: pandolfo
      MYSQL_ROOT_PASSWORD: toor
      MYSQL_HOST: localhost
    volumes:
      - ./data/db-sla:/var/lib/mysql  #eseguire prima: mkdir -p ./data/db-sla
#    ports:
#      - 6034:3306  #solo per debug di sla-manager
#    expose:
#      - 3306
    networks:
      - dsbd-net

  sla-manager:
    container_name: sla-manager
    build:
      dockerfile: Dockerfile
      context: ./sla-manager
    depends_on:
      - mysql-sla
    networks:
      - dsbd-net
    ports:
      - 8004:8080
    restart:
      on-failure

networks:
  dsbd-net:
